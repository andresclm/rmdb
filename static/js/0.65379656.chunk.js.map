{"version":3,"sources":["../node_modules/regenerator-runtime/runtime.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../../src/core/types.ts","../../src/core/utils.ts","../../src/core/config.ts","../../src/core/queryObserver.ts","../../src/core/query.ts","../../src/core/queryCache.ts","../../src/core/setFocusHandler.ts","../../src/react/ReactQueryCacheProvider.tsx","../../src/react/ReactQueryConfigProvider.tsx","../../src/react/useMutation.ts","../../src/react/utils.ts","../../src/react/useBaseQuery.ts","../../src/react/useDefaultedQueryConfig.tsx","../../src/react/useQuery.ts","../../src/react/useInfiniteQuery.ts","../../src/Path.tsx","../../src/CircularProgressbar.tsx","../../src/constants.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js"],"names":["runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","method","arg","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","done","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","undefined","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","_slicedToArray","arr","Array","isArray","_arr","_n","_d","_e","_s","_i","unsupportedIterableToArray","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","QueryStatus","cancelledError","isServer","window","noop","Console","console","warn","log","functionalUpdate","updater","stableStringifyReplacer","_key","isObject","isDocumentVisible","document","includes","getQueryArgs","queryKey","queryFn","config","options","a","isPlainObject","o","hasObjectPrototype","prot","getStatusProps","status","isLoading","isSuccess","isError","isIdle","Idle","DEFAULT_CONFIG","queries","queryKeySerializerFn","arrayQueryKey","queryHash","JSON","enabled","retry","retryDelay","attemptIndex","Math","staleTime","cacheTime","refetchOnWindowFocus","refetchOnMount","structuralSharing","getDefaultedQueryConfig","queryCacheConfig","contextConfig","QueryObserver","clear","bind","refetch","fetchMore","subscribe","unsubscribe","updateConfig","prevConfig","updated","getCurrentResult","currentQuery","e","suspense","currentResult","observers","refetchInterval","setInterval","clearRefetchInterval","clearInterval","previousResult","canFetchMore","failureCount","isFetched","isFetching","isFetchingMore","isStale","data","updatedAt","query","prevQuery","initialData","newQuery","onQueryUpdate","action","body","recover","f","pact","s","observer","callback","_this","onFulfilled","onRejected","thenable","finalizer","ActionType","Query","init","hasInitialData","initialStatus","Date","getDefaultState","infiniteConfig","infiniteData","Boolean","throwInErrorBoundary","queryReducer","d","scheduleStaleTimeout","setTimeout","invalidate","MarkStale","scheduleGarbageCollection","heal","cancel","clearTimeout","setData","prevData","replaceEqualDeep","array","aSize","bItems","b","bSize","copy","equalItems","queryCache","isEnabled","some","shouldRefetchOnWindowFocus","test","subscribeObserver","unsubscribeObserver","filter","x","shouldContinue","params","promiseOrValue","Failed","delay","originalQueryFn","pageVariables","rebuiltPageVariables","awaitBody","nextCursor","pageArgs","fetchMoreVariable","previous","old","newArgs","newData","Fetch","cancelled","fetch","QueryCache","acc","getDefaultConfig","getQueries","predicate","predicateFn","deepIncludes","getQuery","exact","getQueryData","removeQueries","cancelQueries","refetchActive","refetchInactive","throwOnError","resetErrorBoundaries","buildQuery","notifyGlobalListeners","configWithoutRetry","setQueryData","initialStale","defaultQueryCache","makeQueryCache","frozen","queryCaches","onWindowFocus","navigator","removePreviousHandler","queryCacheContext","React","useQueryCache","configContext","useContextConfig","useIsMounted","mountedRef","isMounted","useSafeState","setState","scheduleMicrotask","useBaseQuery","contextQueryCache","useDefaultedQueryConfig","rerender","useRerenderer","observerRef","firstRender","useQuery","useInfiniteQuery","infinite","Path","className","counterClockwise","dashRatio","pathRadius","strokeWidth","style","React.createElement","assign","getDashStyle","getPathDescription","fillOpacity","rotation","diameter","PI","gapLength","strokeDasharray","strokeDashoffset","React.Component","getBackgroundPadding","props","background","backgroundPadding","getPathRadius","getPathRatio","minValue","maxValue","min","max","render","circleRatio","classes","styles","text","pathRatio","root","viewBox","cx","cy","r","trail","path","y","defaultProps","_unsupportedIterableToArray","minLen","n","from","_arrayLikeToArray","len","arr2"],"mappings":"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","file":"static/js/0.65379656.chunk.js","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import type { Query, FetchMoreOptions, RefetchOptions } from './query';\nimport type { QueryCache } from './queryCache'\n\nexport type QueryKey =\n  | boolean\n  | null\n  | number\n  | object\n  | string\n  | undefined\n  | { [key: number]: QueryKey }\n  | { [key: string]: QueryKey }\n  | readonly QueryKey[]\n\nexport type ArrayQueryKey = QueryKey[]\n\nexport type QueryFunction<TResult> = (\n  ...args: any[]\n) => TResult | Promise<TResult>\n\nexport type TypedQueryFunction<\n  TResult,\n  TArgs extends TypedQueryFunctionArgs = TypedQueryFunctionArgs\n> = (...args: TArgs) => TResult | Promise<TResult>\n\nexport type TypedQueryFunctionArgs = readonly [unknown, ...unknown[]]\n\nexport type InitialDataFunction<TResult> = () => TResult | undefined\n\nexport type InitialStaleFunction = () => boolean\n\nexport type QueryKeySerializerFunction = (\n  queryKey: QueryKey\n) => [string, QueryKey[]]\n\nexport interface BaseQueryConfig<TResult, TError = unknown> {\n  /**\n   * Set this to `false` to disable automatic refetching when the query mounts or changes query keys.\n   * To refetch the query, use the `refetch` method returned from the `useQuery` instance.\n   */\n  enabled?: boolean | unknown\n  /**\n   * If `false`, failed queries will not retry by default.\n   * If `true`, failed queries will retry infinitely., failureCount: num\n   * If set to an integer number, e.g. 3, failed queries will retry until the failed query count meets that number.\n   * If set to a function `(failureCount, error) => boolean` failed queries will retry until the function returns false.\n   */\n  retry?: boolean | number | ((failureCount: number, error: TError) => boolean)\n  retryDelay?: number | ((retryAttempt: number) => number)\n  staleTime?: number\n  cacheTime?: number\n  isDataEqual?: (oldData: unknown, newData: unknown) => boolean\n  queryFn?: QueryFunction<TResult>\n  queryKey?: QueryKey\n  queryKeySerializerFn?: QueryKeySerializerFunction\n  queryFnParamsFilter?: (args: ArrayQueryKey) => ArrayQueryKey\n  initialData?: TResult | InitialDataFunction<TResult>\n  initialStale?: boolean | InitialStaleFunction\n  infinite?: true\n  /**\n   * Set this to `false` to disable structural sharing between query results.\n   * Defaults to `true`.\n   */\n  structuralSharing?: boolean\n}\n\nexport interface QueryObserverConfig<TResult, TError = unknown>\n  extends BaseQueryConfig<TResult, TError> {\n  /**\n   * Set this to `false` to disable automatic refetching when the query mounts or changes query keys.\n   * To refetch the query, use the `refetch` method returned from the `useQuery` instance.\n   * Defaults to `true`.\n   */\n  enabled?: boolean | unknown\n  /**\n   * If set to a number, the query will continuously refetch at this frequency in milliseconds.\n   * Defaults to `false`.\n   */\n  refetchInterval?: number\n  /**\n   * If set to `true`, the query will continue to refetch while their tab/window is in the background.\n   * Defaults to `false`.\n   */\n  refetchIntervalInBackground?: boolean\n  /**\n   * Set this to `true` or `false` to enable/disable automatic refetching on window focus for this query.\n   * Defaults to `true`.\n   */\n  refetchOnWindowFocus?: boolean\n  /**\n   * If set to `false`, will disable additional instances of a query to trigger background refetches.\n   * Defaults to `true`.\n   */\n  refetchOnMount?: boolean\n  /**\n   * This callback will fire any time the query successfully fetches new data.\n   */\n  onSuccess?: (data: TResult) => void\n  /**\n   * This callback will fire if the query encounters an error and will be passed the error.\n   */\n  onError?: (err: TError) => void\n  /**\n   * This callback will fire any time the query is either successfully fetched or errors and be passed either the data or error.\n   */\n  onSettled?: (data: TResult | undefined, error: TError | null) => void\n  /**\n   * Whether errors should be thrown instead of setting the `error` property.\n   * Defaults to `false`.\n   */\n  useErrorBoundary?: boolean\n  /**\n   * If set to `true`, the query will suspend when `status === 'loading'`\n   * and throw errors when `status === 'error'`.\n   * Defaults to `false`.\n   */\n  suspense?: boolean\n  /**\n   * Set this to `true` to keep the previous `data` when fetching based on a new query key.\n   * Defaults to `false`.\n   */\n  keepPreviousData?: boolean\n  /**\n   * By default the query cache from the context is used, but a different cache can be specified.\n   */\n  queryCache?: QueryCache\n}\n\nexport interface QueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface PaginatedQueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface InfiniteQueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult[], TError> {\n  getFetchMore: (lastPage: TResult, allPages: TResult[]) => unknown\n}\n\nexport type IsFetchingMoreValue = 'previous' | 'next' | false\n\nexport enum QueryStatus {\n  Idle = 'idle',\n  Loading = 'loading',\n  Error = 'error',\n  Success = 'success',\n}\n\nexport interface QueryResultBase<TResult, TError = unknown> {\n  canFetchMore: boolean | undefined\n  clear: () => void\n  data: TResult | undefined\n  error: TError | null\n  failureCount: number\n  fetchMore: (\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ) => Promise<TResult | undefined>\n  isError: boolean\n  isFetched: boolean\n  isFetching: boolean\n  isFetchingMore?: IsFetchingMoreValue\n  isIdle: boolean\n  isLoading: boolean\n  isStale: boolean\n  isSuccess: boolean\n  query: Query<TResult, TError>\n  refetch: (options?: RefetchOptions) => Promise<TResult | undefined>\n  status: QueryStatus\n  updatedAt: number\n}\n\nexport interface QueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult, TError> {}\n\nexport interface PaginatedQueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult, TError> {\n  resolvedData: TResult | undefined\n  latestData: TResult | undefined\n}\n\nexport interface InfiniteQueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult[], TError> {}\n\nexport interface MutateConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> {\n  onSuccess?: (data: TResult, variables: TVariables) => Promise<void> | void\n  onError?: (\n    error: TError,\n    variables: TVariables,\n    snapshotValue: TSnapshot\n  ) => Promise<void> | void\n  onSettled?: (\n    data: undefined | TResult,\n    error: TError | null,\n    variables: TVariables,\n    snapshotValue?: TSnapshot\n  ) => Promise<void> | void\n  throwOnError?: boolean\n}\n\nexport interface MutationConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> extends MutateConfig<TResult, TError, TVariables, TSnapshot> {\n  onMutate?: (variables: TVariables) => Promise<TSnapshot> | TSnapshot\n  useErrorBoundary?: boolean\n  suspense?: boolean\n  /**\n   * By default the query cache from the context is used, but a different cache can be specified.\n   */\n  queryCache?: QueryCache\n}\n\nexport type MutationFunction<TResult, TVariables = unknown> = (\n  variables: TVariables\n) => Promise<TResult>\n\nexport type MutateFunction<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> = (\n  variables?: TVariables,\n  config?: MutateConfig<TResult, TError, TVariables, TSnapshot>\n) => Promise<TResult | undefined>\n\nexport type MutationResultPair<TResult, TError, TVariables, TSnapshot> = [\n  MutateFunction<TResult, TError, TVariables, TSnapshot>,\n  MutationResult<TResult, TError>\n]\n\nexport interface MutationResult<TResult, TError = unknown> {\n  status: QueryStatus\n  data: TResult | undefined\n  error: TError | null\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n  reset: () => void\n}\n\nexport interface ReactQueryConfig<TResult = unknown, TError = unknown> {\n  queries?: ReactQueryQueriesConfig<TResult, TError>\n  shared?: ReactQuerySharedConfig\n  mutations?: ReactQueryMutationsConfig<TResult, TError>\n}\n\nexport interface ReactQuerySharedConfig {\n  suspense?: boolean\n}\n\nexport interface ReactQueryQueriesConfig<TResult, TError>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface ReactQueryMutationsConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> extends MutationConfig<TResult, TError, TVariables, TSnapshot> {}\n","import { QueryConfig, QueryStatus, QueryKey, QueryFunction } from './types'\n\n// TYPES\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\ntype ConsoleFunction = (...args: any[]) => void\n\nexport interface ConsoleObject {\n  log: ConsoleFunction\n  warn: ConsoleFunction\n  error: ConsoleFunction\n}\n\n// UTILS\n\nlet _uid = 0\nexport const uid = () => _uid++\nexport const cancelledError = {}\nexport const globalStateListeners = []\nexport const isServer = typeof window === 'undefined'\nexport function noop(): void {\n  return void 0\n}\nexport let Console: ConsoleObject = console || {\n  error: noop,\n  warn: noop,\n  log: noop,\n}\n\nexport function setConsole(c: ConsoleObject) {\n  Console = c\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nfunction stableStringifyReplacer(_key: string, value: any): unknown {\n  if (typeof value === 'function') {\n    throw new Error('Cannot stringify non JSON value')\n  }\n\n  if (isObject(value)) {\n    return Object.keys(value)\n      .sort()\n      .reduce((result, key) => {\n        result[key] = value[key]\n        return result\n      }, {} as any)\n  }\n\n  return value\n}\n\nexport function stableStringify(value: any): string {\n  return JSON.stringify(value, stableStringifyReplacer)\n}\n\nexport function deepIncludes(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(key => !deepIncludes(a[key], b[key]))\n  }\n\n  return false\n}\n\nexport function isDocumentVisible(): boolean {\n  // document global can be unavailable in react native\n  if (typeof document === 'undefined') {\n    return true\n  }\n  return [undefined, 'visible', 'prerender'].includes(document.visibilityState)\n}\n\nexport function isOnline(): boolean {\n  return navigator.onLine === undefined || navigator.onLine\n}\n\nexport function getQueryArgs<TResult, TError, TOptions = undefined>(\n  args: any[]\n): [QueryKey, QueryConfig<TResult, TError>, TOptions] {\n  let queryKey: QueryKey\n  let queryFn: QueryFunction<TResult> | undefined\n  let config: QueryConfig<TResult, TError> | undefined\n  let options: TOptions\n\n  if (isObject(args[0])) {\n    queryKey = args[0].queryKey\n    queryFn = args[0].queryFn\n    config = args[0].config\n    options = args[1]\n  } else if (isObject(args[1])) {\n    queryKey = args[0]\n    config = args[1]\n    options = args[2]\n  } else {\n    queryKey = args[0]\n    queryFn = args[1]\n    config = args[2]\n    options = args[3]\n  }\n\n  config = config ? { queryKey, ...config } : { queryKey }\n\n  if (queryFn) {\n    config = { ...config, queryFn }\n  }\n\n  return [queryKey, config, options]\n}\n\nexport function deepEqual(a: any, b: any): boolean {\n  return replaceEqualDeep(a, b) === a\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\nexport function isObject(a: unknown): boolean {\n  return a && typeof a === 'object' && !Array.isArray(a)\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nfunction isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function getStatusProps<T extends QueryStatus>(status: T) {\n  return {\n    status,\n    isLoading: status === QueryStatus.Loading,\n    isSuccess: status === QueryStatus.Success,\n    isError: status === QueryStatus.Error,\n    isIdle: status === QueryStatus.Idle,\n  }\n}\n","import { stableStringify } from './utils'\nimport {\n  ArrayQueryKey,\n  QueryKey,\n  QueryKeySerializerFunction,\n  ReactQueryConfig,\n  QueryConfig,\n  MutationConfig,\n} from './types'\n\n// TYPES\n\nexport interface ReactQueryConfigRef {\n  current: ReactQueryConfig\n}\n\n// CONFIG\n\nexport const defaultQueryKeySerializerFn: QueryKeySerializerFunction = (\n  queryKey: QueryKey\n): [string, ArrayQueryKey] => {\n  try {\n    let arrayQueryKey: ArrayQueryKey = Array.isArray(queryKey)\n      ? queryKey\n      : [queryKey]\n    const queryHash = stableStringify(arrayQueryKey)\n    arrayQueryKey = JSON.parse(queryHash)\n    return [queryHash, arrayQueryKey]\n  } catch {\n    throw new Error('A valid query key is required!')\n  }\n}\n\n/**\n * Config merging strategy\n *\n * When using hooks the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the hook query cache.\n * 3. Combined defaults from any config providers in the tree.\n * 4. Query/mutation config provided to the hook.\n *\n * When using a query cache directly the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the query cache.\n * 3. Query/mutation config provided to the query cache method.\n */\nexport const DEFAULT_CONFIG: ReactQueryConfig = {\n  queries: {\n    queryKeySerializerFn: defaultQueryKeySerializerFn,\n    enabled: true,\n    retry: 3,\n    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n    staleTime: 0,\n    cacheTime: 5 * 60 * 1000,\n    refetchOnWindowFocus: true,\n    refetchOnMount: true,\n    structuralSharing: true,\n  },\n}\n\nexport function mergeReactQueryConfigs(\n  a: ReactQueryConfig,\n  b: ReactQueryConfig\n): ReactQueryConfig {\n  return {\n    shared: {\n      ...a.shared,\n      ...b.shared,\n    },\n    queries: {\n      ...a.queries,\n      ...b.queries,\n    },\n    mutations: {\n      ...a.mutations,\n      ...b.mutations,\n    },\n  }\n}\n\nexport function getDefaultedQueryConfig<TResult, TError>(\n  queryCacheConfig?: ReactQueryConfig,\n  contextConfig?: ReactQueryConfig,\n  config?: QueryConfig<TResult, TError>,\n  configOverrides?: QueryConfig<TResult, TError>\n): QueryConfig<TResult, TError> {\n  return {\n    ...DEFAULT_CONFIG.shared,\n    ...DEFAULT_CONFIG.queries,\n    ...queryCacheConfig?.shared,\n    ...queryCacheConfig?.queries,\n    ...contextConfig?.shared,\n    ...contextConfig?.queries,\n    ...config,\n    ...configOverrides,\n  } as QueryConfig<TResult, TError>\n}\n\nexport function getDefaultedMutationConfig<\n  TResult,\n  TError,\n  TVariables,\n  TSnapshot\n>(\n  queryCacheConfig?: ReactQueryConfig,\n  contextConfig?: ReactQueryConfig,\n  config?: MutationConfig<TResult, TError, TVariables, TSnapshot>,\n  configOverrides?: MutationConfig<TResult, TError, TVariables, TSnapshot>\n): MutationConfig<TResult, TError, TVariables, TSnapshot> {\n  return {\n    ...DEFAULT_CONFIG.shared,\n    ...DEFAULT_CONFIG.mutations,\n    ...queryCacheConfig?.shared,\n    ...queryCacheConfig?.mutations,\n    ...contextConfig?.shared,\n    ...contextConfig?.mutations,\n    ...config,\n    ...configOverrides,\n  } as MutationConfig<TResult, TError, TVariables, TSnapshot>\n}\n","import { getStatusProps, isServer, isDocumentVisible, Console } from './utils'\nimport type { QueryResult, QueryObserverConfig } from './types'\nimport type { Query, QueryState, Action, FetchMoreOptions, RefetchOptions } from './query'\n\nexport type UpdateListener<TResult, TError> = (\n  result: QueryResult<TResult, TError>\n) => void\n\nexport class QueryObserver<TResult, TError> {\n  config: QueryObserverConfig<TResult, TError>\n\n  private currentQuery!: Query<TResult, TError>\n  private currentResult!: QueryResult<TResult, TError>\n  private previousResult?: QueryResult<TResult, TError>\n  private updateListener?: UpdateListener<TResult, TError>\n  private refetchIntervalId?: number\n  private started?: boolean\n\n  constructor(config: QueryObserverConfig<TResult, TError>) {\n    this.config = config\n\n    // Bind exposed methods\n    this.clear = this.clear.bind(this)\n    this.refetch = this.refetch.bind(this)\n    this.fetchMore = this.fetchMore.bind(this)\n\n    // Subscribe to the query\n    this.updateQuery()\n  }\n\n  subscribe(listener?: UpdateListener<TResult, TError>): () => void {\n    this.started = true\n    this.updateListener = listener\n    this.currentQuery.subscribeObserver(this)\n    this.optionalFetch()\n    this.updateRefetchInterval()\n    return this.unsubscribe.bind(this)\n  }\n\n  unsubscribe(preventGC?: boolean): void {\n    this.started = false\n    this.updateListener = undefined\n    this.clearRefetchInterval()\n    this.currentQuery.unsubscribeObserver(this, preventGC)\n  }\n\n  updateConfig(config: QueryObserverConfig<TResult, TError>): void {\n    const prevConfig = this.config\n    this.config = config\n\n    const updated = this.updateQuery()\n\n    // Take no further actions if the observer did not start yet\n    if (!this.started) {\n      return\n    }\n\n    // If we subscribed to a new query, optionally fetch and update refetch\n    if (updated) {\n      this.optionalFetch()\n      this.updateRefetchInterval()\n      return\n    }\n\n    // Optionally fetch if the query became enabled\n    if (config.enabled && !prevConfig.enabled) {\n      this.optionalFetch()\n    }\n\n    // Update refetch interval if needed\n    if (\n      config.enabled !== prevConfig.enabled ||\n      config.refetchInterval !== prevConfig.refetchInterval ||\n      config.refetchIntervalInBackground !==\n        prevConfig.refetchIntervalInBackground\n    ) {\n      this.updateRefetchInterval()\n    }\n  }\n\n  getCurrentResult(): QueryResult<TResult, TError> {\n    return this.currentResult\n  }\n\n  clear(): void {\n    return this.currentQuery.clear()\n  }\n\n  async refetch(options?: RefetchOptions): Promise<TResult | undefined> {\n    this.currentQuery.updateConfig(this.config)\n    return this.currentQuery.refetch(options)\n  }\n\n  async fetchMore(\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ): Promise<TResult | undefined> {\n    this.currentQuery.updateConfig(this.config)\n    return this.currentQuery.fetchMore(fetchMoreVariable, options)\n  }\n\n  async fetch(): Promise<TResult | undefined> {\n    this.currentQuery.updateConfig(this.config)\n    return this.currentQuery.fetch().catch(error => {\n      Console.error(error)\n      return undefined\n    })\n  }\n\n  private optionalFetch(): void {\n    if (\n      this.config.enabled && // Don't auto refetch if disabled\n      !(this.config.suspense && this.currentResult.isFetched) && // Don't refetch if in suspense mode and the data is already fetched\n      this.currentResult.isStale && // Only refetch if stale\n      (this.config.refetchOnMount || this.currentQuery.observers.length === 1)\n    ) {\n      this.fetch()\n    }\n  }\n\n  private updateRefetchInterval(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearRefetchInterval()\n\n    if (\n      !this.config.enabled ||\n      !this.config.refetchInterval ||\n      this.config.refetchInterval < 0 ||\n      this.config.refetchInterval === Infinity\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (this.config.refetchIntervalInBackground || isDocumentVisible()) {\n        this.fetch()\n      }\n    }, this.config.refetchInterval)\n  }\n\n  clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  private createResult(): QueryResult<TResult, TError> {\n    const { currentQuery, previousResult, config } = this\n\n    const {\n      canFetchMore,\n      error,\n      failureCount,\n      isFetched,\n      isFetching,\n      isFetchingMore,\n      isLoading,\n      isStale,\n    } = currentQuery.state\n\n    let { data, status, updatedAt } = currentQuery.state\n\n    // Keep previous data if needed\n    if (config.keepPreviousData && isLoading && previousResult?.isSuccess) {\n      data = previousResult.data\n      updatedAt = previousResult.updatedAt\n      status = previousResult.status\n    }\n\n    return {\n      ...getStatusProps(status),\n      canFetchMore,\n      clear: this.clear,\n      data,\n      error,\n      failureCount,\n      fetchMore: this.fetchMore,\n      isFetched,\n      isFetching,\n      isFetchingMore,\n      isStale,\n      query: currentQuery,\n      refetch: this.refetch,\n      updatedAt,\n    }\n  }\n\n  private updateQuery(): boolean {\n    const prevQuery = this.currentQuery\n\n    // Remove the initial data when there is an existing query\n    // because this data should not be used for a new query\n    const config = prevQuery\n      ? { ...this.config, initialData: undefined }\n      : this.config\n\n    const newQuery = config.queryCache!.buildQuery(config.queryKey, config)\n\n    if (newQuery === prevQuery) {\n      return false\n    }\n\n    this.previousResult = this.currentResult\n    this.currentQuery = newQuery\n    this.currentResult = this.createResult()\n\n    if (this.started) {\n      prevQuery?.unsubscribeObserver(this)\n      this.currentQuery.subscribeObserver(this)\n    }\n\n    return true\n  }\n\n  onQueryUpdate(\n    _state: QueryState<TResult, TError>,\n    action: Action<TResult, TError>\n  ): void {\n    this.currentResult = this.createResult()\n\n    const { data, error, isSuccess, isError } = this.currentResult\n\n    if (action.type === 'Success' && isSuccess) {\n      this.config.onSuccess?.(data!)\n      this.config.onSettled?.(data!, null)\n      this.updateRefetchInterval()\n    } else if (action.type === 'Error' && isError) {\n      this.config.onError?.(error!)\n      this.config.onSettled?.(undefined, error!)\n      this.updateRefetchInterval()\n    }\n\n    this.updateListener?.(this.currentResult)\n  }\n}\n","import {\n  isServer,\n  functionalUpdate,\n  cancelledError,\n  isDocumentVisible,\n  noop,\n  Console,\n  getStatusProps,\n  Updater,\n  replaceEqualDeep,\n} from './utils'\nimport {\n  ArrayQueryKey,\n  InfiniteQueryConfig,\n  InitialDataFunction,\n  IsFetchingMoreValue,\n  QueryConfig,\n  QueryFunction,\n  QueryStatus,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport { QueryObserver, UpdateListener } from './queryObserver'\n\n// TYPES\n\ninterface QueryInitConfig<TResult, TError> {\n  queryCache: QueryCache\n  queryKey: ArrayQueryKey\n  queryHash: string\n  config: QueryConfig<TResult, TError>\n  notifyGlobalListeners: (query: Query<TResult, TError>) => void\n}\n\nexport interface QueryState<TResult, TError> {\n  canFetchMore?: boolean\n  data?: TResult\n  error: TError | null\n  failureCount: number\n  isError: boolean\n  isFetched: boolean\n  isFetching: boolean\n  isFetchingMore: IsFetchingMoreValue\n  isIdle: boolean\n  isLoading: boolean\n  isStale: boolean\n  isSuccess: boolean\n  status: QueryStatus\n  throwInErrorBoundary?: boolean\n  updatedAt: number\n}\n\ninterface FetchOptions {\n  fetchMore?: FetchMoreOptions\n}\n\nexport interface FetchMoreOptions {\n  fetchMoreVariable?: unknown\n  previous: boolean\n}\n\nexport interface RefetchOptions {\n  throwOnError?: boolean;\n}\n\nexport enum ActionType {\n  Failed = 'Failed',\n  MarkStale = 'MarkStale',\n  Fetch = 'Fetch',\n  Success = 'Success',\n  Error = 'Error',\n  SetState = 'SetState',\n}\n\ninterface FailedAction {\n  type: ActionType.Failed\n}\n\ninterface MarkStaleAction {\n  type: ActionType.MarkStale\n}\n\ninterface FetchAction {\n  type: ActionType.Fetch\n}\n\ninterface SuccessAction<TResult> {\n  type: ActionType.Success\n  data: TResult | undefined\n  isStale: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: ActionType.Error\n  cancelled: boolean\n  error: TError\n}\n\ninterface SetStateAction<TResult, TError> {\n  type: ActionType.SetState\n  updater: Updater<QueryState<TResult, TError>, QueryState<TResult, TError>>\n}\n\nexport type Action<TResult, TError> =\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | MarkStaleAction\n  | SetStateAction<TResult, TError>\n  | SuccessAction<TResult>\n\n// CLASS\n\nexport class Query<TResult, TError> {\n  queryCache: QueryCache\n  queryKey: ArrayQueryKey\n  queryHash: string\n  config: QueryConfig<TResult, TError>\n  observers: QueryObserver<TResult, TError>[]\n  state: QueryState<TResult, TError>\n  shouldContinueRetryOnFocus?: boolean\n  promise?: Promise<TResult | undefined>\n\n  private fetchMoreVariable?: unknown\n  private pageVariables?: ArrayQueryKey[]\n  private cacheTimeout?: number\n  private retryTimeout?: number\n  private staleTimeout?: number\n  private cancelPromises?: () => void\n  private cancelled?: typeof cancelledError | null\n  private notifyGlobalListeners: (query: Query<TResult, TError>) => void\n\n  constructor(init: QueryInitConfig<TResult, TError>) {\n    this.config = init.config\n    this.queryCache = init.queryCache\n    this.queryKey = init.queryKey\n    this.queryHash = init.queryHash\n    this.notifyGlobalListeners = init.notifyGlobalListeners\n    this.observers = []\n    this.state = getDefaultState(init.config)\n\n    if (init.config.infinite) {\n      const infiniteConfig = init.config as InfiniteQueryConfig<TResult, TError>\n      const infiniteData = (this.state.data as unknown) as TResult[] | undefined\n\n      if (typeof infiniteData !== 'undefined') {\n        this.fetchMoreVariable = infiniteConfig.getFetchMore(\n          infiniteData[infiniteData.length - 1],\n          infiniteData\n        )\n        this.state.canFetchMore = Boolean(this.fetchMoreVariable)\n      }\n\n      // Here we seed the pageVariables for the query\n      if (!this.pageVariables) {\n        this.pageVariables = [[...this.queryKey]]\n      }\n    }\n\n    // If the query started with data, schedule\n    // a stale timeout\n    if (!isServer && this.state.data) {\n      this.scheduleStaleTimeout()\n\n      // Simulate a query healing process\n      this.heal()\n\n      // Schedule for garbage collection in case\n      // nothing subscribes to this query\n      this.scheduleGarbageCollection()\n    }\n  }\n\n  updateConfig(config: QueryConfig<TResult, TError>): void {\n    this.config = config\n  }\n\n  private dispatch(action: Action<TResult, TError>): void {\n    this.state = queryReducer(this.state, action)\n    this.observers.forEach(d => d.onQueryUpdate(this.state, action))\n    this.notifyGlobalListeners(this)\n  }\n\n  scheduleStaleTimeout(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearStaleTimeout()\n\n    if (this.state.isStale || this.config.staleTime === Infinity) {\n      return\n    }\n\n    this.staleTimeout = setTimeout(() => {\n      this.invalidate()\n    }, this.config.staleTime)\n  }\n\n  invalidate(): void {\n    this.clearStaleTimeout()\n\n    if (this.state.isStale) {\n      return\n    }\n\n    this.dispatch({ type: ActionType.MarkStale })\n  }\n\n  scheduleGarbageCollection(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearCacheTimeout()\n\n    if (this.config.cacheTime === Infinity) {\n      return\n    }\n\n    this.cacheTimeout = setTimeout(\n      () => {\n        this.clear()\n      },\n      typeof this.state.data === 'undefined' &&\n        this.state.status !== QueryStatus.Error\n        ? 0\n        : this.config.cacheTime\n    )\n  }\n\n  async refetch(options?: RefetchOptions): Promise<TResult | undefined> {\n    try {\n      return await this.fetch()\n    } catch (error) {\n      if (options?.throwOnError === true) {\n        throw error;\n      }\n      Console.error(error)\n    }\n    return;\n  }\n\n  heal(): void {\n    // Stop the query from being garbage collected\n    this.clearCacheTimeout()\n\n    // Mark the query as not cancelled\n    this.cancelled = null\n  }\n\n  cancel(): void {\n    this.cancelled = cancelledError\n\n    if (this.cancelPromises) {\n      this.cancelPromises()\n    }\n\n    delete this.promise\n  }\n\n  private clearTimersObservers(): void {\n    this.observers.forEach(observer => {\n      observer.clearRefetchInterval()\n    })\n  }\n\n  private clearStaleTimeout() {\n    if (this.staleTimeout) {\n      clearTimeout(this.staleTimeout)\n      this.staleTimeout = undefined\n    }\n  }\n\n  private clearCacheTimeout() {\n    if (this.cacheTimeout) {\n      clearTimeout(this.cacheTimeout)\n      this.cacheTimeout = undefined\n    }\n  }\n\n  private clearRetryTimeout() {\n    if (this.retryTimeout) {\n      clearTimeout(this.retryTimeout)\n      this.retryTimeout = undefined\n    }\n  }\n\n  private setState(\n    updater: Updater<QueryState<TResult, TError>, QueryState<TResult, TError>>\n  ): void {\n    this.dispatch({ type: ActionType.SetState, updater })\n  }\n\n  setData(updater: Updater<TResult | undefined, TResult>): void {\n    const prevData = this.state.data\n\n    // Get the new data\n    let data: TResult | undefined = functionalUpdate(updater, prevData)\n\n    // Structurally share data between prev and new data if needed\n    if (this.config.structuralSharing) {\n      data = replaceEqualDeep(prevData, data)\n    }\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.config.isDataEqual?.(prevData, data)) {\n      data = prevData\n    }\n\n    const isStale = this.config.staleTime === 0\n\n    // Set data and mark it as cached\n    this.dispatch({\n      type: ActionType.Success,\n      data,\n      isStale,\n    })\n\n    if (!isStale) {\n      // Schedule a fresh invalidation!\n      this.scheduleStaleTimeout()\n    }\n  }\n\n  clear(): void {\n    this.clearStaleTimeout()\n    this.clearCacheTimeout()\n    this.clearRetryTimeout()\n    this.clearTimersObservers()\n    this.cancel()\n    delete this.queryCache.queries[this.queryHash]\n    this.notifyGlobalListeners(this)\n  }\n\n  isEnabled(): boolean {\n    return this.observers.some(observer => observer.config.enabled)\n  }\n\n  shouldRefetchOnWindowFocus(): boolean {\n    return (\n      this.isEnabled() &&\n      this.state.isStale &&\n      this.observers.some(observer => observer.config.refetchOnWindowFocus)\n    )\n  }\n\n  subscribe(\n    listener?: UpdateListener<TResult, TError>\n  ): QueryObserver<TResult, TError> {\n    const observer = new QueryObserver<TResult, TError>({\n      queryCache: this.queryCache,\n      queryKey: this.queryKey,\n      ...this.config,\n    })\n\n    observer.subscribe(listener)\n\n    return observer\n  }\n\n  subscribeObserver(observer: QueryObserver<TResult, TError>): void {\n    this.observers.push(observer)\n    this.heal()\n  }\n\n  unsubscribeObserver(\n    observer: QueryObserver<TResult, TError>,\n    preventGC?: boolean\n  ): void {\n    this.observers = this.observers.filter(x => x !== observer)\n\n    if (!this.observers.length) {\n      this.cancel()\n\n      if (!preventGC) {\n        // Schedule garbage collection\n        this.scheduleGarbageCollection()\n      }\n    }\n  }\n\n  // Set up the core fetcher function\n  private async tryFetchData(\n    fn: QueryFunction<TResult>,\n    args: ArrayQueryKey\n  ): Promise<TResult> {\n    try {\n      // Perform the query\n      const filter = this.config.queryFnParamsFilter\n      const params = filter ? filter(args) : args\n\n      // Perform the query\n      const promiseOrValue = fn(...params)\n\n      this.cancelPromises = () => (promiseOrValue as any)?.cancel?.()\n\n      const data = await promiseOrValue\n      delete this.shouldContinueRetryOnFocus\n\n      delete this.cancelPromises\n      if (this.cancelled) throw this.cancelled\n\n      return data\n    } catch (error) {\n      delete this.cancelPromises\n      if (this.cancelled) throw this.cancelled\n\n      // Do we need to retry the request?\n      if (\n        this.config.retry === true ||\n        this.state.failureCount < this.config.retry! ||\n        (typeof this.config.retry === 'function' &&\n          this.config.retry(this.state.failureCount, error))\n      ) {\n        // If we retry, increase the failureCount\n        this.dispatch({ type: ActionType.Failed })\n\n        // Only retry if the document is visible\n        if (!isDocumentVisible()) {\n          // set this flag to continue retries on focus\n          this.shouldContinueRetryOnFocus = true\n          // Resolve a\n          return new Promise(noop)\n        }\n\n        delete this.shouldContinueRetryOnFocus\n\n        // Determine the retryDelay\n        const delay = functionalUpdate(\n          this.config.retryDelay,\n          this.state.failureCount\n        )\n\n        // Return a new promise with the retry\n        return await new Promise((resolve, reject) => {\n          // Keep track of the retry timeout\n          this.retryTimeout = setTimeout(async () => {\n            if (this.cancelled) return reject(this.cancelled)\n\n            try {\n              const data = await this.tryFetchData(fn, args)\n              if (this.cancelled) return reject(this.cancelled)\n              resolve(data)\n            } catch (error) {\n              if (this.cancelled) return reject(this.cancelled)\n              reject(error)\n            }\n          }, delay)\n        })\n      }\n\n      throw error\n    }\n  }\n\n  async fetch(options?: FetchOptions): Promise<TResult | undefined> {\n    let queryFn = this.config.queryFn\n\n    if (!queryFn) {\n      return\n    }\n\n    // If we are already fetching, return current promise\n    if (this.promise) {\n      return this.promise\n    }\n\n    if (this.config.infinite) {\n      const infiniteConfig = this.config as InfiniteQueryConfig<TResult, TError>\n      const infiniteData = (this.state.data as unknown) as TResult[] | undefined\n      const fetchMore = options?.fetchMore\n\n      const originalQueryFn = queryFn\n\n      queryFn = async () => {\n        const data: TResult[] = []\n        const pageVariables = this.pageVariables ? [...this.pageVariables] : []\n        const rebuiltPageVariables: ArrayQueryKey[] = []\n\n        do {\n          const args = pageVariables.shift()!\n\n          if (!data.length) {\n            // the first page query doesn't need to be rebuilt\n            data.push(await originalQueryFn(...args))\n            rebuiltPageVariables.push(args)\n          } else {\n            // get an up-to-date cursor based on the previous data set\n\n            const nextCursor = infiniteConfig.getFetchMore(\n              data[data.length - 1],\n              data\n            )\n\n            // break early if there's no next cursor\n            // otherwise we'll start from the beginning\n            // which will cause unwanted duplication\n            if (!nextCursor) {\n              break\n            }\n\n            const pageArgs = [\n              // remove the last argument (the previously saved cursor)\n              ...args.slice(0, -1),\n              nextCursor,\n            ] as ArrayQueryKey\n\n            data.push(await originalQueryFn(...pageArgs))\n            rebuiltPageVariables.push(pageArgs)\n          }\n        } while (pageVariables.length)\n\n        this.fetchMoreVariable = infiniteConfig.getFetchMore(\n          data[data.length - 1],\n          data\n        )\n        this.state.canFetchMore = Boolean(this.fetchMoreVariable)\n        this.pageVariables = rebuiltPageVariables\n\n        return (data as unknown) as TResult\n      }\n\n      if (fetchMore) {\n        queryFn = async (...args: ArrayQueryKey) => {\n          try {\n            const { fetchMoreVariable, previous } = fetchMore\n\n            this.setState(old => ({\n              ...old,\n              isFetchingMore: previous ? 'previous' : 'next',\n            }))\n\n            const newArgs = [...args, fetchMoreVariable] as ArrayQueryKey\n\n            if (this.pageVariables) {\n              this.pageVariables[previous ? 'unshift' : 'push'](newArgs)\n            } else {\n              this.pageVariables = [newArgs]\n            }\n\n            const newData = await originalQueryFn(...newArgs)\n\n            let data\n\n            if (!infiniteData) {\n              data = [newData]\n            } else if (previous) {\n              data = [newData, ...infiniteData]\n            } else {\n              data = [...infiniteData, newData]\n            }\n\n            this.fetchMoreVariable = infiniteConfig.getFetchMore(newData, data)\n            this.state.canFetchMore = Boolean(this.fetchMoreVariable)\n\n            return (data as unknown) as TResult\n          } finally {\n            this.setState(old => ({\n              ...old,\n              isFetchingMore: false,\n            }))\n          }\n        }\n      }\n    }\n\n    this.promise = (async () => {\n      // If there are any retries pending for this query, kill them\n      this.cancelled = null\n\n      try {\n        // Set to fetching state if not already in it\n        if (!this.state.isFetching) {\n          this.dispatch({ type: ActionType.Fetch })\n        }\n\n        // Try to get the data\n        const data = await this.tryFetchData(queryFn!, this.queryKey)\n\n        this.setData(data)\n\n        delete this.promise\n\n        return data\n      } catch (error) {\n        this.dispatch({\n          type: ActionType.Error,\n          cancelled: error === this.cancelled,\n          error,\n        })\n\n        delete this.promise\n\n        if (error !== this.cancelled) {\n          throw error\n        }\n\n        return\n      }\n    })()\n\n    return this.promise\n  }\n\n  fetchMore(\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ): Promise<TResult | undefined> {\n    return this.fetch({\n      fetchMore: {\n        fetchMoreVariable: fetchMoreVariable ?? this.fetchMoreVariable,\n        previous: options?.previous || false,\n      },\n    })\n  }\n}\n\nfunction getDefaultState<TResult, TError>(\n  config: QueryConfig<TResult, TError>\n): QueryState<TResult, TError> {\n  const initialData =\n    typeof config.initialData === 'function'\n      ? (config.initialData as InitialDataFunction<TResult>)()\n      : config.initialData\n\n  const hasInitialData = typeof initialData !== 'undefined'\n\n  const isStale =\n    !config.enabled ||\n    (typeof config.initialStale === 'function'\n      ? config.initialStale()\n      : config.initialStale ?? !hasInitialData)\n\n  const initialStatus = hasInitialData\n    ? QueryStatus.Success\n    : config.enabled\n    ? QueryStatus.Loading\n    : QueryStatus.Idle\n\n  return {\n    ...getStatusProps(initialStatus),\n    error: null,\n    isFetched: false,\n    isFetching: initialStatus === QueryStatus.Loading,\n    isFetchingMore: false,\n    failureCount: 0,\n    isStale,\n    data: initialData,\n    updatedAt: hasInitialData ? Date.now() : 0,\n  }\n}\n\nexport function queryReducer<TResult, TError>(\n  state: QueryState<TResult, TError>,\n  action: Action<TResult, TError>\n): QueryState<TResult, TError> {\n  switch (action.type) {\n    case ActionType.Failed:\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case ActionType.MarkStale:\n      return {\n        ...state,\n        isStale: true,\n      }\n    case ActionType.Fetch:\n      const status =\n        typeof state.data !== 'undefined'\n          ? QueryStatus.Success\n          : QueryStatus.Loading\n      return {\n        ...state,\n        ...getStatusProps(status),\n        isFetching: true,\n        failureCount: 0,\n      }\n    case ActionType.Success:\n      return {\n        ...state,\n        ...getStatusProps(QueryStatus.Success),\n        data: action.data,\n        error: null,\n        isStale: action.isStale,\n        isFetched: true,\n        isFetching: false,\n        updatedAt: Date.now(),\n        failureCount: 0,\n      }\n    case ActionType.Error:\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n        isFetched: true,\n        isFetching: false,\n        isStale: true,\n        ...(!action.cancelled && {\n          ...getStatusProps(QueryStatus.Error),\n          error: action.error,\n          throwInErrorBoundary: true,\n        }),\n      }\n    case ActionType.SetState:\n      return functionalUpdate(action.updater, state)\n    default:\n      return state\n  }\n}\n","import {\n  isServer,\n  getQueryArgs,\n  deepIncludes,\n  Console,\n  isObject,\n  Updater,\n  functionalUpdate,\n} from './utils'\nimport { getDefaultedQueryConfig } from './config'\nimport { Query } from './query'\nimport {\n  QueryConfig,\n  QueryFunction,\n  QueryKey,\n  ReactQueryConfig,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from './types'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  frozen?: boolean\n  defaultConfig?: ReactQueryConfig\n}\n\ninterface ClearOptions {\n  notify?: boolean\n}\n\ninterface PrefetchQueryOptions {\n  force?: boolean\n  throwOnError?: boolean\n}\n\ninterface InvalidateQueriesOptions extends QueryPredicateOptions {\n  refetchActive?: boolean\n  refetchInactive?: boolean\n  throwOnError?: boolean\n}\n\ninterface QueryPredicateOptions {\n  exact?: boolean\n}\n\ntype QueryPredicate = QueryKey | QueryPredicateFn | true\n\ntype QueryPredicateFn = (query: Query<unknown, unknown>) => boolean\n\nexport interface PrefetchQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: QueryConfig<TResult, TError>\n  options?: PrefetchQueryOptions\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any>\n}\n\ntype QueryCacheListener = (\n  cache: QueryCache,\n  query?: Query<unknown, unknown>\n) => void\n\n// CLASS\n\nexport class QueryCache {\n  queries: QueryHashMap\n  isFetching: number\n\n  private config: QueryCacheConfig\n  private globalListeners: QueryCacheListener[]\n\n  constructor(config?: QueryCacheConfig) {\n    this.config = config || {}\n\n    // A frozen cache does not add new queries to the cache\n    this.globalListeners = []\n\n    this.queries = {}\n    this.isFetching = 0\n  }\n\n  private notifyGlobalListeners(query?: Query<any, any>) {\n    this.isFetching = Object.values(this.queries).reduce(\n      (acc, query) => (query.state.isFetching ? acc + 1 : acc),\n      0\n    )\n\n    this.globalListeners.forEach(d => d(this, query))\n  }\n\n  getDefaultConfig() {\n    return this.config.defaultConfig\n  }\n\n  getDefaultedQueryConfig<TResult, TError>(\n    config?: QueryConfig<TResult, TError>\n  ): QueryConfig<TResult, TError> {\n    return getDefaultedQueryConfig(this.getDefaultConfig(), undefined, config, {\n      queryCache: this,\n    })\n  }\n\n  subscribe(listener: QueryCacheListener): () => void {\n    this.globalListeners.push(listener)\n    return () => {\n      this.globalListeners.splice(this.globalListeners.indexOf(listener), 1)\n    }\n  }\n\n  clear(options?: ClearOptions): void {\n    Object.values(this.queries).forEach(query => query.clear())\n    this.queries = {}\n    if (options?.notify) {\n      this.notifyGlobalListeners()\n    }\n  }\n\n  getQueries<TResult = unknown, TError = unknown>(\n    predicate: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): Query<TResult, TError>[] {\n    if (predicate === true) {\n      return Object.values(this.queries)\n    }\n\n    let predicateFn: QueryPredicateFn\n\n    if (typeof predicate === 'function') {\n      predicateFn = predicate as QueryPredicateFn\n    } else {\n      const config = this.getDefaultedQueryConfig()\n      const [queryHash, queryKey] = config.queryKeySerializerFn!(predicate)\n\n      predicateFn = d =>\n        options?.exact\n          ? d.queryHash === queryHash\n          : deepIncludes(d.queryKey, queryKey)\n    }\n\n    return Object.values(this.queries).filter(predicateFn)\n  }\n\n  getQuery<TResult, TError = unknown>(\n    predicate: QueryPredicate\n  ): Query<TResult, TError> | undefined {\n    return this.getQueries<TResult, TError>(predicate, { exact: true })[0]\n  }\n\n  getQueryData<TResult>(predicate: QueryPredicate): TResult | undefined {\n    return this.getQuery<TResult>(predicate)?.state.data\n  }\n\n  removeQueries(\n    predicate: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): void {\n    this.getQueries(predicate, options).forEach(query => query.clear())\n  }\n\n  cancelQueries(\n    predicate: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): void {\n    this.getQueries(predicate, options).forEach(query => query.cancel())\n  }\n\n  async invalidateQueries(\n    predicate: QueryPredicate,\n    options?: InvalidateQueriesOptions\n  ): Promise<void> {\n    const { refetchActive = true, refetchInactive = false, throwOnError } =\n      options || {}\n\n    try {\n      await Promise.all(\n        this.getQueries(predicate, options).map(query => {\n          if (query.observers.length) {\n            if (refetchActive && query.isEnabled()) {\n              return query.fetch()\n            }\n          } else {\n            if (refetchInactive) {\n              return query.fetch()\n            }\n          }\n\n          return query.invalidate()\n        })\n      )\n    } catch (err) {\n      if (throwOnError) {\n        throw err\n      }\n    }\n  }\n\n  resetErrorBoundaries(): void {\n    this.getQueries(true).forEach(query => {\n      query.state.throwInErrorBoundary = false\n    })\n  }\n\n  buildQuery<TResult, TError = unknown>(\n    userQueryKey: QueryKey,\n    queryConfig?: QueryConfig<TResult, TError>\n  ): Query<TResult, TError> {\n    const config = this.getDefaultedQueryConfig(queryConfig)\n\n    const [queryHash, queryKey] = config.queryKeySerializerFn!(userQueryKey)\n\n    let query\n\n    if (this.queries[queryHash]) {\n      query = this.queries[queryHash] as Query<TResult, TError>\n      query.updateConfig(config)\n    }\n\n    if (!query) {\n      query = new Query<TResult, TError>({\n        queryCache: this,\n        queryKey,\n        queryHash,\n        config,\n        notifyGlobalListeners: query => {\n          this.notifyGlobalListeners(query)\n        },\n      })\n\n      if (!this.config.frozen) {\n        this.queries[queryHash] = query\n        this.notifyGlobalListeners(query)\n      }\n    }\n\n    return query\n  }\n\n  // Parameter syntax with optional prefetch options\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with query function and optional prefetch options\n  async prefetchQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n    queryKey: QueryKey,\n    queryFn: TypedQueryFunction<TResult, TArgs>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TResult>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with query function, config and optional prefetch options\n  async prefetchQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n    queryKey: QueryKey,\n    queryFn: TypedQueryFunction<TResult, TArgs>,\n    queryConfig: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TResult>,\n    queryConfig: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Object syntax\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    config: PrefetchQueryObjectConfig<TResult, TError>\n  ): Promise<TResult | undefined>\n\n  // Implementation\n  async prefetchQuery<TResult, TError>(\n    ...args: any[]\n  ): Promise<TResult | undefined> {\n    if (\n      isObject(args[1]) &&\n      (args[1].hasOwnProperty('throwOnError') ||\n        args[1].hasOwnProperty('force'))\n    ) {\n      args[3] = args[1]\n      args[1] = undefined\n      args[2] = undefined\n    }\n\n    const [queryKey, config, options] = getQueryArgs<\n      TResult,\n      TError,\n      PrefetchQueryOptions | undefined\n    >(args)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    const configWithoutRetry = { retry: false, ...config }\n\n    try {\n      const query = this.buildQuery<TResult, TError>(\n        queryKey,\n        configWithoutRetry\n      )\n      if (options?.force || query.state.isStale) {\n        await query.fetch()\n      }\n      return query.state.data\n    } catch (err) {\n      if (options?.throwOnError) {\n        throw err\n      }\n      Console.error(err)\n      return\n    }\n  }\n\n  setQueryData<TResult, TError = unknown>(\n    queryKey: QueryKey,\n    updater: Updater<TResult | undefined, TResult>,\n    config?: QueryConfig<TResult, TError>\n  ) {\n    const query = this.getQuery<TResult, TError>(queryKey)\n\n    if (query) {\n      query.setData(updater)\n      return\n    }\n\n    this.buildQuery<TResult, TError>(queryKey, {\n      initialStale: typeof config?.staleTime === 'undefined',\n      initialData: functionalUpdate(updater, undefined),\n      ...config,\n    })\n  }\n}\n\nconst defaultQueryCache = makeQueryCache({ frozen: isServer })\nexport { defaultQueryCache as queryCache }\nexport const queryCaches = [defaultQueryCache]\n\nexport function makeQueryCache(config?: QueryCacheConfig) {\n  return new QueryCache(config)\n}\n","import { isOnline, isDocumentVisible, Console, isServer } from './utils'\nimport { queryCaches } from './queryCache'\n\ntype FocusHandler = () => void\n\nconst visibilityChangeEvent = 'visibilitychange'\nconst focusEvent = 'focus'\n\nconst onWindowFocus: FocusHandler = () => {\n  if (isDocumentVisible() && isOnline()) {\n    queryCaches.forEach(queryCache =>\n      queryCache\n        .invalidateQueries(query => {\n          if (!query.shouldRefetchOnWindowFocus()) {\n            return false\n          }\n\n          if (query.shouldContinueRetryOnFocus) {\n            // delete promise, so refetching will create new one\n            delete query.promise\n          }\n\n          return true\n        })\n        .catch(Console.error)\n    )\n  }\n}\n\nlet removePreviousHandler: (() => void) | void\n\nexport function setFocusHandler(callback: (callback: FocusHandler) => void) {\n  // Unsub the old watcher\n  if (removePreviousHandler) {\n    removePreviousHandler()\n  }\n  // Sub the new watcher\n  removePreviousHandler = callback(onWindowFocus)\n}\n\nsetFocusHandler((handleFocus: FocusHandler) => {\n  // Listen to visibillitychange and focus\n  if (!isServer && window?.addEventListener) {\n    window.addEventListener(visibilityChangeEvent, handleFocus, false)\n    window.addEventListener(focusEvent, handleFocus, false)\n\n    return () => {\n      // Be sure to unsubscribe if a new handler is set\n      window.removeEventListener(visibilityChangeEvent, handleFocus)\n      window.removeEventListener(focusEvent, handleFocus)\n    }\n  }\n  return\n})\n","import React from 'react'\n\nimport {\n  queryCache as defaultQueryCache,\n  queryCaches,\n  makeQueryCache,\n} from '../core'\nimport { QueryCache } from '../core/queryCache'\n\nexport const queryCacheContext = React.createContext(defaultQueryCache)\n\nexport const useQueryCache = () => React.useContext(queryCacheContext)\n\nexport interface ReactQueryCacheProviderProps {\n  queryCache?: QueryCache\n}\n\nexport const ReactQueryCacheProvider: React.FC<ReactQueryCacheProviderProps> = ({\n  queryCache,\n  children,\n}) => {\n  const resolvedQueryCache = React.useMemo(\n    () => queryCache || makeQueryCache(),\n    [queryCache]\n  )\n\n  React.useEffect(() => {\n    queryCaches.push(resolvedQueryCache)\n\n    return () => {\n      // remove the cache from the active list\n      const i = queryCaches.indexOf(resolvedQueryCache)\n      if (i > -1) {\n        queryCaches.splice(i, 1)\n      }\n      // if the resolvedQueryCache was created by us, we need to tear it down\n      if (queryCache == null) {\n        resolvedQueryCache.clear({ notify: false })\n      }\n    }\n  }, [resolvedQueryCache, queryCache])\n\n  return (\n    <queryCacheContext.Provider value={resolvedQueryCache}>\n      {children}\n    </queryCacheContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { mergeReactQueryConfigs } from '../core/config'\nimport { ReactQueryConfig } from '../core/types'\n\nconst configContext = React.createContext<ReactQueryConfig | undefined>(\n  undefined\n)\n\nexport function useContextConfig() {\n  return React.useContext(configContext)\n}\n\nexport interface ReactQueryConfigProviderProps {\n  config: ReactQueryConfig\n}\n\nexport const ReactQueryConfigProvider: React.FC<ReactQueryConfigProviderProps> = ({\n  config,\n  children,\n}) => {\n  const parentConfig = useContextConfig()\n\n  const mergedConfig = React.useMemo(\n    () =>\n      parentConfig ? mergeReactQueryConfigs(parentConfig, config) : config,\n    [config, parentConfig]\n  )\n\n  return (\n    <configContext.Provider value={mergedConfig}>\n      {children}\n    </configContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { useDefaultedMutationConfig } from './useDefaultedMutationConfig'\nimport { useGetLatest, useMountedCallback } from './utils'\nimport { Console, uid, getStatusProps } from '../core/utils'\nimport {\n  QueryStatus,\n  MutationResultPair,\n  MutationFunction,\n  MutationConfig,\n  MutateConfig,\n} from '../core/types'\n\n// TYPES\n\ntype Reducer<S, A> = (prevState: S, action: A) => S\n\ninterface State<TResult, TError> {\n  status: QueryStatus\n  data: TResult | undefined\n  error: TError | null\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n}\n\nenum ActionType {\n  Reset = 'Reset',\n  Loading = 'Loading',\n  Resolve = 'Resolve',\n  Reject = 'Reject',\n}\n\ninterface ResetAction {\n  type: ActionType.Reset\n}\n\ninterface LoadingAction {\n  type: ActionType.Loading\n}\n\ninterface ResolveAction<TResult> {\n  type: ActionType.Resolve\n  data: TResult\n}\n\ninterface RejectAction<TError> {\n  type: ActionType.Reject\n  error: TError\n}\n\ntype Action<TResult, TError> =\n  | ResetAction\n  | LoadingAction\n  | ResolveAction<TResult>\n  | RejectAction<TError>\n\n// HOOK\n\nconst getDefaultState = (): State<any, any> => ({\n  ...getStatusProps(QueryStatus.Idle),\n  data: undefined,\n  error: null,\n})\n\nfunction mutationReducer<TResult, TError>(\n  state: State<TResult, TError>,\n  action: Action<TResult, TError>\n): State<TResult, TError> {\n  switch (action.type) {\n    case ActionType.Reset:\n      return getDefaultState()\n    case ActionType.Loading:\n      return {\n        ...getStatusProps(QueryStatus.Loading),\n        data: undefined,\n        error: null,\n      }\n    case ActionType.Resolve:\n      return {\n        ...getStatusProps(QueryStatus.Success),\n        data: action.data,\n        error: null,\n      }\n    case ActionType.Reject:\n      return {\n        ...getStatusProps(QueryStatus.Error),\n        data: undefined,\n        error: action.error,\n      }\n    default:\n      return state\n  }\n}\n\nexport function useMutation<\n  TResult,\n  TError = unknown,\n  TVariables = undefined,\n  TSnapshot = unknown\n>(\n  mutationFn: MutationFunction<TResult, TVariables>,\n  config: MutationConfig<TResult, TError, TVariables, TSnapshot> = {}\n): MutationResultPair<TResult, TError, TVariables, TSnapshot> {\n  config = useDefaultedMutationConfig(config)\n  const getConfig = useGetLatest(config)\n\n  const [state, unsafeDispatch] = React.useReducer(\n    mutationReducer as Reducer<State<TResult, TError>, Action<TResult, TError>>,\n    null,\n    getDefaultState\n  )\n\n  const dispatch = useMountedCallback(unsafeDispatch)\n\n  const getMutationFn = useGetLatest(mutationFn)\n\n  const latestMutationRef = React.useRef<number>()\n\n  const mutate = React.useCallback(\n    async (\n      variables?: TVariables,\n      mutateConfig: MutateConfig<TResult, TError, TVariables, TSnapshot> = {}\n    ): Promise<TResult | undefined> => {\n      const config = getConfig()\n\n      const mutationId = uid()\n      latestMutationRef.current = mutationId\n\n      const isLatest = () => latestMutationRef.current === mutationId\n\n      let snapshotValue: TSnapshot | undefined\n\n      try {\n        dispatch({ type: ActionType.Loading })\n        snapshotValue = (await config.onMutate?.(variables!)) as TSnapshot\n\n        const data = await getMutationFn()(variables!)\n\n        if (isLatest()) {\n          dispatch({ type: ActionType.Resolve, data })\n        }\n\n        await config.onSuccess?.(data, variables!)\n        await mutateConfig.onSuccess?.(data, variables!)\n        await config.onSettled?.(data, null, variables!)\n        await mutateConfig.onSettled?.(data, null, variables!)\n\n        return data\n      } catch (error) {\n        Console.error(error)\n        await config.onError?.(error, variables!, snapshotValue!)\n        await mutateConfig.onError?.(error, variables!, snapshotValue!)\n        await config.onSettled?.(\n          undefined,\n          error,\n          variables!,\n          snapshotValue as TSnapshot\n        )\n        await mutateConfig.onSettled?.(\n          undefined,\n          error,\n          variables!,\n          snapshotValue\n        )\n\n        if (isLatest()) {\n          dispatch({ type: ActionType.Reject, error })\n        }\n\n        if (mutateConfig.throwOnError ?? config.throwOnError) {\n          throw error\n        }\n\n        return\n      }\n    },\n    [dispatch, getConfig, getMutationFn]\n  )\n\n  const reset = React.useCallback(() => {\n    dispatch({ type: ActionType.Reset })\n  }, [dispatch])\n\n  React.useEffect(() => {\n    const { suspense, useErrorBoundary } = getConfig()\n\n    if ((useErrorBoundary ?? suspense) && state.error) {\n      throw state.error\n    }\n  }, [getConfig, state.error])\n\n  return [mutate, { ...state, reset }]\n}\n","import React from 'react'\n\nimport { isServer } from '../core/utils'\n\nexport function useGetLatest<T>(obj: T): () => T {\n  const ref = React.useRef<T>(obj)\n  ref.current = obj\n  return React.useCallback(() => ref.current, [])\n}\n\nfunction useIsMounted(): () => boolean {\n  const mountedRef = React.useRef(false)\n  const isMounted = React.useCallback(() => mountedRef.current, [])\n\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](() => {\n    mountedRef.current = true\n    return () => {\n      mountedRef.current = false\n    }\n  }, [])\n\n  return isMounted\n}\n\nexport function useMountedCallback<T extends Function>(callback: T): T {\n  const isMounted = useIsMounted()\n  return (React.useCallback(\n    (...args: any[]) => {\n      if (isMounted()) {\n        return callback(...args)\n      }\n    },\n    [callback, isMounted]\n  ) as any) as T\n}\n\n/**\n * This hook is a safe useState version which schedules state updates in microtasks\n * to prevent updating a component state while React is rendering different components\n * or when the component is not mounted anymore.\n */\nexport function useSafeState<S>(\n  initialState: S | (() => S)\n): [S, React.Dispatch<React.SetStateAction<S>>] {\n  const isMounted = useIsMounted()\n  const [state, setState] = React.useState(initialState)\n\n  const safeSetState = React.useCallback(\n    (value: React.SetStateAction<S>) => {\n      scheduleMicrotask(() => {\n        if (isMounted()) {\n          setState(value)\n        }\n      })\n    },\n    [isMounted]\n  )\n\n  return [state, safeSetState]\n}\n\nexport function useRerenderer() {\n  const [, setState] = useSafeState({})\n  return React.useCallback(() => setState({}), [setState])\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nfunction scheduleMicrotask(callback: () => void): void {\n  Promise.resolve()\n    .then(callback)\n    .catch(error =>\n      setTimeout(() => {\n        throw error\n      })\n    )\n}\n","import React from 'react'\n\nimport { useRerenderer } from './utils'\nimport { QueryObserver } from '../core/queryObserver'\nimport { QueryResultBase, QueryObserverConfig } from '../core/types'\nimport { useDefaultedQueryConfig } from './useDefaultedQueryConfig'\n\nexport function useBaseQuery<TResult, TError>(\n  config: QueryObserverConfig<TResult, TError> = {}\n): QueryResultBase<TResult, TError> {\n  config = useDefaultedQueryConfig(config)\n\n  // Make a rerender function\n  const rerender = useRerenderer()\n\n  // Create query observer\n  const observerRef = React.useRef<QueryObserver<TResult, TError>>()\n  const firstRender = !observerRef.current\n  const observer = observerRef.current || new QueryObserver(config)\n  observerRef.current = observer\n\n  // Subscribe to the observer\n  React.useEffect(\n    () =>\n      observer.subscribe(() => {\n        rerender()\n      }),\n    [observer, rerender]\n  )\n\n  // Update config\n  if (!firstRender) {\n    observer.updateConfig(config)\n  }\n\n  const result = observer.getCurrentResult()\n\n  // Handle suspense\n  if (config.suspense || config.useErrorBoundary) {\n    if (result.isError && result.query.state.throwInErrorBoundary) {\n      throw result.error\n    }\n\n    if (config.enabled && config.suspense && !result.isSuccess) {\n      observer.subscribe()\n      throw observer.fetch().finally(() => {\n        observer.unsubscribe(true)\n      })\n    }\n  }\n\n  return result\n}\n","import { QueryConfig } from '../core/types'\nimport { getDefaultedQueryConfig } from '../core/config'\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useContextConfig } from './ReactQueryConfigProvider'\n\nexport function useDefaultedQueryConfig<TResult, TError>(\n  config?: QueryConfig<TResult, TError>\n): QueryConfig<TResult, TError> {\n  const contextConfig = useContextConfig()\n  const contextQueryCache = useQueryCache()\n  const queryCache = config?.queryCache || contextQueryCache\n  const queryCacheConfig = queryCache.getDefaultConfig()\n  return getDefaultedQueryConfig(queryCacheConfig, contextConfig, config, {\n    queryCache,\n  })\n}\n","import {\n  QueryConfig,\n  QueryFunction,\n  QueryKey,\n  QueryResult,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\nimport { useBaseQuery } from './useBaseQuery'\n\n// TYPES\n\nexport interface UseQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: QueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function useQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n  queryKey: QueryKey,\n  queryFn: TypedQueryFunction<TResult, TArgs>,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\nexport function useQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TResult>,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Object syntax\nexport function useQuery<TResult = unknown, TError = unknown>(\n  config: UseQueryObjectConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Implementation\nexport function useQuery<TResult, TError>(\n  ...args: any[]\n): QueryResult<TResult, TError> {\n  const config = getQueryArgs<TResult, TError>(args)[1]\n  return useBaseQuery<TResult, TError>(config)\n}\n","import {\n  InfiniteQueryConfig,\n  InfiniteQueryResult,\n  QueryFunction,\n  QueryKey,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\nimport { useBaseQuery } from './useBaseQuery'\n\n// TYPES\n\nexport interface UseInfiniteQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: InfiniteQueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function useInfiniteQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useInfiniteQuery<\n  TResult,\n  TError,\n  TArgs extends TypedQueryFunctionArgs\n>(\n  queryKey: QueryKey,\n  queryFn: TypedQueryFunction<TResult, TArgs>,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\nexport function useInfiniteQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TResult>,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Object syntax\nexport function useInfiniteQuery<TResult = unknown, TError = unknown>(\n  config: UseInfiniteQueryObjectConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Implementation\nexport function useInfiniteQuery<TResult, TError>(\n  ...args: any[]\n): InfiniteQueryResult<TResult, TError> {\n  const config = getQueryArgs<TResult[], TError>(args)[1]\n  return useBaseQuery<TResult[], TError>({ ...config, infinite: true })\n}\n","import * as React from 'react';\nimport { VIEWBOX_CENTER_X, VIEWBOX_CENTER_Y } from './constants';\n\nfunction Path({\n  className,\n  counterClockwise,\n  dashRatio,\n  pathRadius,\n  strokeWidth,\n  style,\n}: {\n  className?: string;\n  counterClockwise: boolean;\n  dashRatio: number;\n  pathRadius: number;\n  strokeWidth: number;\n  style?: object;\n}) {\n  return (\n    <path\n      className={className}\n      style={Object.assign({}, style, getDashStyle({ pathRadius, dashRatio, counterClockwise }))}\n      d={getPathDescription({\n        pathRadius,\n        counterClockwise,\n      })}\n      strokeWidth={strokeWidth}\n      fillOpacity={0}\n    />\n  );\n}\n\n// SVG path description specifies how the path should be drawn\nfunction getPathDescription({\n  pathRadius,\n  counterClockwise,\n}: {\n  pathRadius: number;\n  counterClockwise: boolean;\n}) {\n  const radius = pathRadius;\n  const rotation = counterClockwise ? 1 : 0;\n\n  // Move to center of canvas\n  // Relative move to top canvas\n  // Relative arc to bottom of canvas\n  // Relative arc to top of canvas\n  return `\n      M ${VIEWBOX_CENTER_X},${VIEWBOX_CENTER_Y}\n      m 0,-${radius}\n      a ${radius},${radius} ${rotation} 1 1 0,${2 * radius}\n      a ${radius},${radius} ${rotation} 1 1 0,-${2 * radius}\n    `;\n}\n\nfunction getDashStyle({\n  counterClockwise,\n  dashRatio,\n  pathRadius,\n}: {\n  counterClockwise: boolean;\n  dashRatio: number;\n  pathRadius: number;\n}) {\n  const diameter = Math.PI * 2 * pathRadius;\n  const gapLength = (1 - dashRatio) * diameter;\n\n  return {\n    // Have dash be full diameter, and gap be full diameter\n    strokeDasharray: `${diameter}px ${diameter}px`,\n    // Shift dash backward by gapLength, so gap starts appearing at correct distance\n    strokeDashoffset: `${counterClockwise ? -gapLength : gapLength}px`,\n  };\n}\n\nexport default Path;\n","import * as React from 'react';\n\nimport {\n  VIEWBOX_WIDTH,\n  VIEWBOX_HEIGHT,\n  VIEWBOX_HEIGHT_HALF,\n  VIEWBOX_CENTER_X,\n  VIEWBOX_CENTER_Y,\n} from './constants';\nimport Path from './Path';\nimport { CircularProgressbarDefaultProps, CircularProgressbarProps } from './types';\n\nclass CircularProgressbar extends React.Component<CircularProgressbarProps> {\n  static defaultProps: CircularProgressbarDefaultProps = {\n    background: false,\n    backgroundPadding: 0,\n    circleRatio: 1,\n    classes: {\n      root: 'CircularProgressbar',\n      trail: 'CircularProgressbar-trail',\n      path: 'CircularProgressbar-path',\n      text: 'CircularProgressbar-text',\n      background: 'CircularProgressbar-background',\n    },\n    counterClockwise: false,\n    className: '',\n    maxValue: 100,\n    minValue: 0,\n    strokeWidth: 8,\n    styles: {\n      root: {},\n      trail: {},\n      path: {},\n      text: {},\n      background: {},\n    },\n    text: '',\n  };\n\n  getBackgroundPadding() {\n    if (!this.props.background) {\n      // Don't add padding if not displaying background\n      return 0;\n    }\n    return this.props.backgroundPadding;\n  }\n\n  getPathRadius() {\n    // The radius of the path is defined to be in the middle, so in order for the path to\n    // fit perfectly inside the 100x100 viewBox, need to subtract half the strokeWidth\n    return VIEWBOX_HEIGHT_HALF - this.props.strokeWidth / 2 - this.getBackgroundPadding();\n  }\n\n  // Ratio of path length to trail length, as a value between 0 and 1\n  getPathRatio() {\n    const { value, minValue, maxValue } = this.props;\n    const boundedValue = Math.min(Math.max(value, minValue), maxValue);\n    return (boundedValue - minValue) / (maxValue - minValue);\n  }\n\n  render() {\n    const {\n      circleRatio,\n      className,\n      classes,\n      counterClockwise,\n      styles,\n      strokeWidth,\n      text,\n    } = this.props;\n\n    const pathRadius = this.getPathRadius();\n    const pathRatio = this.getPathRatio();\n\n    return (\n      <svg\n        className={`${classes.root} ${className}`}\n        style={styles.root}\n        viewBox={`0 0 ${VIEWBOX_WIDTH} ${VIEWBOX_HEIGHT}`}\n        data-test-id=\"CircularProgressbar\"\n      >\n        {this.props.background ? (\n          <circle\n            className={classes.background}\n            style={styles.background}\n            cx={VIEWBOX_CENTER_X}\n            cy={VIEWBOX_CENTER_Y}\n            r={VIEWBOX_HEIGHT_HALF}\n          />\n        ) : null}\n\n        <Path\n          className={classes.trail}\n          counterClockwise={counterClockwise}\n          dashRatio={circleRatio}\n          pathRadius={pathRadius}\n          strokeWidth={strokeWidth}\n          style={styles.trail}\n        />\n\n        <Path\n          className={classes.path}\n          counterClockwise={counterClockwise}\n          dashRatio={pathRatio * circleRatio}\n          pathRadius={pathRadius}\n          strokeWidth={strokeWidth}\n          style={styles.path}\n        />\n\n        {text ? (\n          <text\n            className={classes.text}\n            style={styles.text}\n            x={VIEWBOX_CENTER_X}\n            y={VIEWBOX_CENTER_Y}\n          >\n            {text}\n          </text>\n        ) : null}\n      </svg>\n    );\n  }\n}\n\nexport default CircularProgressbar;\n","export const VIEWBOX_WIDTH = 100;\nexport const VIEWBOX_HEIGHT = 100;\nexport const VIEWBOX_HEIGHT_HALF = 50;\nexport const VIEWBOX_CENTER_X = 50;\nexport const VIEWBOX_CENTER_Y = 50;\n","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}"],"sourceRoot":""}